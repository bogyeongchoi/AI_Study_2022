{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/music-ai-644/AI_Study_2022/blob/main/users/yjna/Chapter4_%EC%88%98%EC%97%85%EC%8B%9C%EA%B0%84\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 로지스틱 회귀"
      ],
      "metadata": {
        "id": "gtvXxVU7ngtN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 시그모이드(sigmoid) 함수 \n"
      ],
      "metadata": {
        "id": "Jm3czD6BoDAk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "import matplotlib.pyplot as plt "
      ],
      "metadata": {
        "id": "ZRiv5fNUBdof"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-10, 10, 1000) #시작점, 끝점, 사이의 나오는 점의 개수\n",
        "print(len(x))"
      ],
      "metadata": {
        "id": "jcCdGSHmOWAZ",
        "outputId": "82c5d32b-f3a2-4e11-aed2-106a1c196be7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid(x):\n",
        "    output = 1 / (1+np.exp(-x))\n",
        "    return output"
      ],
      "metadata": {
        "id": "KTMYKJEZOrLv"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = sigmoid(x)\n",
        "print(len(y))"
      ],
      "metadata": {
        "id": "ECv4n4diPQ30",
        "outputId": "96431794-6c27-4817-876e-055d699a4d9e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x, y)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "jxPZL-05UfWI",
        "outputId": "48a5f107-92ed-4828-92d4-4d7d7d561ae7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_data = np.array([[0.1, 0.2],[-1.0,-2.0],[3.0, -2.0]])\n",
        "print(x_data)"
      ],
      "metadata": {
        "id": "EdT4HRTDPuYC",
        "outputId": "849bb058-0cb2-4b28-d715-eb8b078919e0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0.1  0.2]\n",
            " [-1.  -2. ]\n",
            " [ 3.  -2. ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "w1 = 1.0; w2=2.0; b=-1"
      ],
      "metadata": {
        "id": "FtmCghXYQCco"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_data[0][0]"
      ],
      "metadata": {
        "id": "xNr8_acrQPje",
        "outputId": "213f2409-2f91-4006-8ffa-325cdd6154c4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.1"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_data[:,0]\n"
      ],
      "metadata": {
        "id": "P_j5MQbjQaEd",
        "outputId": "3a9ece41-8712-4e71-d615-2f47735612ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.1, -1. ,  3. ])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "logit = x_data[:, 0] * w1 + x_data[:, 1] * w2 + b\n",
        "\n",
        "output = sigmoid(logit)\n",
        "print(output)"
      ],
      "metadata": {
        "id": "Axh7-UEQSj10",
        "outputId": "71c7dfff-c6eb-4064-bce3-8bf9de0a75c0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.37754067 0.00247262 0.11920292]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "output > 0.5"
      ],
      "metadata": {
        "id": "GAwURVBYUm4w",
        "outputId": "87600a2a-1ad4-4fbf-cde7-f3d7ac23a9d9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(output > 0.5) * 1.0"
      ],
      "metadata": {
        "id": "yKtxFJfNUnQn",
        "outputId": "6822cca0-f718-47f9-f466-6eb23bcfaa75",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Chapter2_1.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}